grammar Scheme
  rule result
    expression
  end

  rule expression
    whitespace e:( atom / arithmetic / defination / define_function) whitespace
    {
      def to_sexp
        e.to_sexp
      end
    }
  end

  rule expressions
    expression*
    {
      def to_sexp
        elements.map { |e| e.to_sexp }
      end
    }
  end

  rule atom
    string / number / symbol
  end

  rule string
    '"' (!'"' . / '\"')* '"'
    {
      def to_sexp
        [:string, text_value[1..-2]]
      end
    }
  end

  rule number
    ('+' / '-') 0..1 [0-9]+ '.' [0-9]+ ( ( 'e' / 'E' ) [0-9]+ )*
    {
      def to_sexp
        [:number, Float(text_value)]
      end
    } /
    ('+' / '-') 0..1 [0-9]+
    {
      def to_sexp
        [:number, Integer(text_value)]
      end
    }
  end

  rule symbol
    [a-z] [a-z0-9_]*
    {
      def to_sexp
        [:symbol, text_value.to_sym]
      end
    }
  end

  rule whitespace
    " "*
  end

  rule left_parenthesis
    whitespace '(' whitespace
  end
  
  rule right_parenthesis
    whitespace ')' whitespace
  end

  rule arithmetic
    addition / multiplication / negation / division
  end

  rule division
    left_parenthesis '/' whitespace args:expressions right_parenthesis
    {
      def to_sexp
        [:/, args.to_sexp]
      end
    }
  end

  rule multiplication
    left_parenthesis '*' whitespace factors:expressions right_parenthesis
    {
      def to_sexp
        [:*, factors.to_sexp]
      end
    }
  end

  rule negation
    left_parenthesis '-' whitespace args:expressions right_parenthesis
    {
      def to_sexp
        [:-, args.to_sexp]
      end
    }
  end

  rule addition
    left_parenthesis '+' whitespace addends:expressions right_parenthesis
    {
      def to_sexp
        [:+, addends.to_sexp]
      end
    }
  end

  rule defination
    left_parenthesis 'define' whitespace symbol whitespace expression right_parenthesis
    {
      def to_sexp
        [:define, symbol.to_sexp, expression.to_sexp]
      end
    }
  end

  rule define_function
    left_parenthesis 'define' left_parenthesis operator:symbol whitespace arguments:symbol right_parenthesis 
      body:expression right_parenthesis
    {
      def to_sexp
        [:define_function, operator.to_sexp, arguments.to_sexp, body.to_sexp]
      end
    }
  end
end